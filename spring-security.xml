<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/security/oauth2 
http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
http://www.springframework.org/schema/security 
http://www.springframework.org/schema/security/spring-security-3.2.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd"
	default-autowire="byType">
	<!--   -->
	
	<security:http auto-config="false" use-expressions="true" 
	    disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint">
	    <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />
		<security:logout />
	</security:http>
	
	
	
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/openid_connect_login" />
	</bean>

	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="openIdConnectAuthenticationProvider" />
	</security:authentication-manager>
	
	<bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">
		<property name="authoritiesMapper">
			<bean class="com.aol.compoundtool.sso.NamedAdminAuthoritiesMapper">	</bean>
		</property>
	</bean>	
	
	<util:set id="namedAdmins" value-type="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
		<bean class="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
			<constructor-arg name="subject" value="${subject}" />
			<constructor-arg name="issuer" value="${issuer}" />
		</bean>
	</util:set>

	<!-- 
	  -
	  - The authentication filter
	  -	
	  -->
	<bean id="openIdConnectAuthenticationFilter" class="com.aol.compoundtool.sso.AuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="issuerService" ref="staticIssuerService" />
		<property name="serverConfigurationService" ref="staticServerConfigurationService" />
		<property name="clientConfigurationService" ref="staticClientConfigurationService" />
		<property name="authRequestOptionsService" ref="staticAuthRequestOptionsService" />
		<property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder" />
	</bean>


	<bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
		<property name="issuer" value="${issuer}" />
	</bean>	
	
	<bean class="org.mitre.openid.connect.client.service.impl.StaticServerConfigurationService" id="staticServerConfigurationService">
		<property name="servers">
			<map>
				<entry key="${issuer}">
					<bean class="org.mitre.openid.connect.config.ServerConfiguration">
						<property name="issuer" value="${issuer}" />
						<property name="authorizationEndpointUri"	value="${authorizationEndpointUri}" />
						<property name="tokenEndpointUri"	value="${tokenEndpointUri}" />
						<property name="userInfoUri" value="${userInfoUri}" />
						<property name="jwksUri" value="${jwksUri}" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" id="staticClientConfigurationService">
		<property name="clients">
			<map>
				<entry key="${issuer}">
					<bean class="org.mitre.oauth2.model.RegisteredClient">
						<property name="clientId" value="${clientId}" />	
						<property name="clientSecret" value="${clientSecret}" />					
						<property name="scope">
							<set value-type="java.lang.String">
								<value>openid</value>
								<value>email</value>
								<value>address</value>
								<value>profile</value>
								<value>phone</value>
							</set>
						</property>
						<property name="tokenEndpointAuthMethod" value="PRIVATE_KEY" />
						<property name="redirectUris">
							<set>
								<value>${redirectUris}</value>
							</set>
						</property>
						<property name="requestObjectSigningAlg">
	                        <util:constant static-field="com.nimbusds.jose.JWSAlgorithm.RS256"/>
	                    </property>
						
				        <property name="jwksUri" value="${redirectUris}" />					
						 
					</bean>
				</entry>
			</map>
  		</property>
	</bean>
	
	<bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService">
		<property name="options">
			<map>			  
			   <entry key="realm" value="${realm}" />			   
			</map>
		</property>
		<property name="tokenOptions">
			<map>			  
			   <entry key="realm" value="${realm}" />			   
			</map>
		</property>
	</bean>
	
	<!--	
		Plain authorization request builder, puts all options as query parameters on the GET request
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />
	<bean class="org.mitre.jwt.signer.service.impl.SymmetricKeyJWTValidatorCacheService" id="symmetricKeyJWTValidatorCacheService" />
	
	
	
	<!--
	  -
	  - Authorization URL Builders: create the URL to redirect the user to for authorization.
	  - 
	  -->

	<!--	
		Plain authorization request builder, puts all options as query parameters on the GET request
	-->
	
	
	<!--
		Signed authorization request builder, puts all options as elements in a JWS-signed request object 
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.SignedAuthRequestUrlBuilder" id="signedAuthRequestUrlBuilder">
	  <property name="signingAndValidationService" ref="defaultSignerService" />
	</bean>

	<!-- 
		Encrypted authorization request builder, puts all the options as elements in a JWE-encrypted request object
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.EncryptedAuthRequestUrlBuilder" id="encryptedAuthRequestUrlBuilder">
	  <property name="encrypterService" ref="validatorCache" />
	    <property name="alg">
	      <util:constant static-field="com.nimbusds.jose.JWEAlgorithm.RSA1_5"/>
	    </property>
	    <property name="enc">
	      <util:constant static-field="com.nimbusds.jose.EncryptionMethod.A128GCM"/>
	    </property>
	</bean>

	
	
	
	
	<bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />
	
	<!-- 
		This service sets up a bunch of signers and validators based on our own keys.
		Replace this keystore's contents for a production deployment.
	 -->
	<bean id="defaultSignerService" class="org.mitre.jwt.signer.service.impl.DefaultJWTSigningAndValidationService">
		<constructor-arg name="keyStore">
			<bean id="defaultKeyStore" class="org.mitre.jose.keystore.JWKSetKeyStore">
				<property name="location" value="classpath:keystore.jwks" />
			</bean>
		</constructor-arg>
		<property name="defaultSignerKeyId" value="rsa1" />
 		<property name="defaultSigningAlgorithmName" value="RS256" />
	</bean>

	<!-- 
		This service publishes the client's public key on a the endpoint "jwk" off the root of this client.
	-->	
	<bean id="clientKeyPublisher" class="org.mitre.openid.connect.client.keypublisher.ClientKeyPublisher">
 		<property name="jwkPublishUrl" value="jwk" />
 		<property name="signingAndValidationService" ref="defaultSignerService" />
 	</bean>
    <context:component-scan base-package="org.mitre.web" />

</beans>
